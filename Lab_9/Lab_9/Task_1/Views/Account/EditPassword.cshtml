@model Task_1.Models.EditPasswordViewModel
@{
    ViewData["Title"] = "Edit Password";
}
<div class="form-card animate__animated animate__fadeIn">
    <h2>Редагувати пароль</h2>
    <form asp-action="EditPassword" method="post" novalidate>
        <div class="form-material mb-4">
            <span asp-validation-for="NewPassword" class="error-message"></span>
            <label asp-for="NewPassword">New Password</label>
            <input asp-for="NewPassword" type="password" class="form-control" />
        </div>
        <div class="form-material mb-4">
            <span asp-validation-for="ConfirmPassword" class="error-message"></span>
            <label asp-for="ConfirmPassword">Confirm Password</label>
            <input asp-for="ConfirmPassword" type="password" class="form-control" />
        </div>
        <button type="submit" class="btn-register">Save</button>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        $(function () {
            var form = $('form');
            form.removeData('validator').removeData('unobtrusiveValidation');
            $.validator.setDefaults({
                showErrors: function (errorMap, errorList) {
                    this.defaultShowErrors();
                    $('.error-message').each(function () {
                        var txt = $(this).text().trim();
                        if (txt) {
                            var parts = txt.split(' ');
                            $(this).html(parts.join('<br/>'));
                        }
                    });
                }
            });
            $.validator.unobtrusive.parse(form);
        });
    </script>
}
